{"name":"Cassanknex","tagline":"A CQL query builder written in the spirit of Knex","body":"\r\n[![NPM Version][npm-image]][npm-url]\r\n[![Inline docs][inch-image]][inch-url]\r\n[![Build Status][travis-image]][travis-url]\r\n\r\n# CassanKnex\r\n\r\nAn Apache Cassandra CQL query builder with support for the DataStax NodeJS driver, written in the spirit of [Knex][knexjs-url] for [CQL 3.1.x][cassandra-cql-3_1-ref-url].\r\n\r\n## Index\r\n\r\n- [Why Cassanknex](#WhyCassanknex)\r\n- [Usage](#Usage)\r\n  - [Generating Queries](#GeneratingQueries)\r\n  - [Executing Queries](#ExecutingQueries)\r\n  - [Quick Start](#Quickstart)\r\n  - [Debugging Queries](#Debugging)\r\n  - [Query Executors (Examples)](#QueryExecutors)\r\n  - [Query Commands (Examples)](#QueryCommands)\r\n    - [Rows](#QueryCommands-Rows)\r\n    - [Column Families](#QueryCommands-ColumnFamilies)\r\n    - [Keyspaces](#QueryCommands-Keyspaces)\r\n  - [Query Modifiers](#QueryModifiers)\r\n    - [Rows](#QueryModifiers-Rows)\r\n    - [Column Families](#QueryModifiers-ColumnFamilies)\r\n    - [Keyspaces](#QueryModifiers-Keyspaces)\r\n- [ChangeLog](#ChangeLog)\r\n\r\n## <a name=\"WhyCassanknex\"></a>Why\r\n\r\nCQL was purposefully designed to be SQL-esq to enhance ease of access for those familiar w/ relational databases\r\nwhile Knex is the canonical NodeJS query builder for SQL dialects; however, even given the lexical similarities, the difference\r\nbetween the usage of CQL vs SQL is significant enough that adding CQL as yet another Knex SQL dialect does not make sense.\r\nThus, CassanKnex.\r\n\r\n## <a name=\"Usage\"></a>Usage\r\n\r\nCassanKnex can be used to execute queries against a Cassandra cluster via [`cassandra-driver`][cassandra-driver-url] (the official DataStax NodeJS driver) or as a simple CQL statement generator via the following relative instantiations:\r\n\r\n### <a name=\"GeneratingQueries\"></a>As a query generator\r\n\r\nCompiled CQL statements can be retrieved at any time via the `cql` method.\r\n\r\n```js\r\nvar cassanKnex = require(\"cassanknex\")();\r\nvar qb = cassanKnex(KEYSPACE).QUERY_COMMAND()\r\n          .QUERY_MODIFIER_1()\r\n          .\r\n          .\r\n          .QUERY_MODIFIER_N();\r\n\r\nvar cql = qb.cql(); // get the cql statement\r\n```\r\n\r\nWhere `KEYSPACE` is the name of the relevant keyspace and\r\n`QUERY_COMMAND` and `QUERY_MODIFIER` are among the list of available [Query Commands](#QueryCommands)  and [Query Modifiers](#QueryModifiers).\r\n\r\n### <a name=\"ExecutingQueries\"></a>As a query executor\r\n\r\nExecution of a given query is performed by invoking either the `exec`, `stream` or `eachRow` methods\r\n(which are straight pass throughs to the DataStax driver's `execute`, `stream` and `eachRow` [methods][cassandra-driver-docs-url], respectively).\r\n\r\n```js\r\nvar cassanKnex = require(\"cassanknex\")({\r\n  connection: {\r\n    contactPoints: [\"LIST OF CONNECTION POINTS\"]\r\n  }\r\n});\r\n\r\ncassanKnex.on(\"ready\", function (err) {\r\n\r\n  if (err)\r\n    console.error(\"Error Connecting to Cassandra Cluster\", err);\r\n  else\r\n    console.log(\"Cassandra Connected\");\r\n\r\n  var qb = cassanKnex(KEYSPACE).QUERY_COMMAND()\r\n          .QUERY_MODIFIER_1()\r\n          .\r\n          .\r\n          .QUERY_MODIFIER_N();\r\n\r\n  // pass through to the underlying DataStax nodejs-driver 'execute' method\r\n\r\n  qb.exec(function(err, res) {\r\n    // do something w/ your query response\r\n  });\r\n\r\n  // OR pass through to the underlying DataStax nodejs-driver 'stream' method\r\n\r\n  var onReadable = function () {\r\n      // Readable is emitted as soon a row is received and parsed\r\n      var row;\r\n      while (row = this.read()) {\r\n        console.log(row);\r\n        // do something w/ the row response\r\n      }\r\n    }\r\n    , onEnd = function () {\r\n      // Stream ended, there aren't any more rows\r\n      console.log(\"query finished\");\r\n    }\r\n    , onError = function (err) {\r\n      // Something went wrong: err is a response error from Cassandra\r\n      console.log(\"query error\", err);\r\n    };\r\n\r\n  // Invoke the stream method\r\n  qb.stream({\r\n    \"readable\": onReadable,\r\n    \"end\": onEnd,\r\n    \"error\": onError\r\n  });\r\n\r\n  // OR pass through to the underlying DataStax nodejs-driver 'eachRow' method\r\n\r\n  var rowCallback = function (n, row) {\r\n      // The callback will be invoked per each row as soon as they are received\r\n      console.log(row);\r\n      // do something w/ the row response\r\n    }\r\n    , errorCb = function (err) {\r\n      // Something went wrong: err is a response error from Cassandra\r\n      console.log(\"query error\", err);\r\n    };\r\n\r\n  // Invoke the eachRow method\r\n  qb.eachRow(rowCallback, errorCb);\r\n});\r\n```\r\n\r\n#### <a name=\"Quickstart\"></a>Quickstart\r\n\r\n\r\n```js\r\nvar cassanKnex = require(\"cassanknex\")({\r\n  connection: { // default is 'undefined'\r\n    contactPoints: [\"10.0.0.2\"]\r\n  },\r\n  exec: { // default is '{}'\r\n    prepare: false // default is 'true'\r\n  }\r\n});\r\n\r\ncassanKnex.on(\"ready\", function (err) {\r\n\r\n  if (err)\r\n    console.error(\"Error Connecting to Cassandra Cluster\", err);\r\n  else {\r\n    console.log(\"Cassandra Connected\");\r\n\r\n  var qb(\"keyspace\").select(\"id\", \"foo\", \"bar\", \"baz\")\r\n    .where(\"id\", \"=\", \"1\")\r\n    .orWhere(\"id\", \"in\", [\"2\", \"3\"])\r\n    .orWhere(\"baz\", \"=\", \"bar\")\r\n    .andWhere(\"foo\", \"IN\", [\"baz\", \"bar\"])\r\n    .limit(10)\r\n    .from(\"table\")\r\n    .exec(function(err, res) {\r\n\r\n      // executes query :\r\n      //  \"SELECT id,foo,bar,baz FROM keyspace.table\r\n      //    WHERE id = ? OR id in (?, ?)\r\n      //    OR baz = ? AND foo IN (?, ?)\r\n      //    LIMIT 10;\"\r\n      // with bindings array  : [ '1', '2', '3', 'bar', 'baz', 'bar' ]\r\n\r\n      if (err)\r\n        console.error(\"error\", err);\r\n      else\r\n        console.log(\"res\", res);\r\n\r\n    });\r\n  }\r\n});\r\n\r\n```\r\n\r\n#### <a name=\"Debugging\"></a>Debugging\r\n\r\nTo enable `debug` mode pass `{ debug: true }` into the CassanKnex `require` statement, e.g.\r\n\r\n```\r\nvar cassanKnex = require(\"cassanknex\")({ debug: true });\r\n\r\n```\r\n\r\nWhen `debug` is enabled the query object will be logged upon execution,\r\nand you'll receive two informational components provided to ease the act of debugging:\r\n\r\n1. `_queryPhases`:\r\n  - An array showing the state of the query string at each step of it's compilation.\r\n2. `_methodStack`:\r\n  - An array showing the methods called throughout the modification lifespan of the query object.\r\n  You'll notice that the 'compiling' method is called after each modification in this stack, that's due to\r\n  re-compiling the query statement (and pushing the result into `_queryPhases`) at each step, when `debug == false`\r\n  the `_cql` query statement and accompanying `_bindings` array are not created until either `qb.cql()` or `qb.exec()`\r\n  are called.\r\n\r\nSo you'll see something akin to the following `insert` statement upon invoking either `qb.cql()` or `qb.exec()`:\r\n```js\r\nvar values = {\r\n  \"id\": \"foo\"\r\n  , \"bar\": \"baz\"\r\n  , \"baz\": [\"foo\", \"bar\"]\r\n};\r\nvar qb = cassanknex(\"cassanKnexy\");\r\nqb.insert(values)\r\n      .usingTimestamp(250000)\r\n      .usingTTL(50000)\r\n      .into(\"columnFamily\")\r\n      .cql();\r\n\r\n// =>\r\n{ _debug: true,\r\n  _dialect: 'cql',\r\n  _keyspace: 'cassanKnexy',\r\n  _columnFamily: 'columnFamily',\r\n  _component: 'query',\r\n  _methodStack:\r\n   [ 'insert',\r\n     'usingTimestamp',\r\n     'insert',\r\n     'usingTTL',\r\n     'insert',\r\n     'table',\r\n     'insert' ],\r\n  _queryPhases:\r\n   [ 'INSERT INTO  (id,bar,baz) VALUES (?, ?, ?);',\r\n     'INSERT INTO  (id,bar,baz) VALUES (?, ?, ?) USING TIMESTAMP ?;',\r\n     'INSERT INTO  (id,bar,baz) VALUES (?, ?, ?) USING TIMESTAMP ? AND USING TTL ?;',\r\n     'INSERT INTO cassanKnexy.columnFamily (id,bar,baz) VALUES (?, ?, ?) USING TIMESTAMP ? AND USING TTL ?;' ],\r\n  _cql: 'INSERT INTO cassanKnexy.columnFamily (id,bar,baz) VALUES (?, ?, ?) USING TIMESTAMP ? AND USING TTL ?;',\r\n  _bindings: [ 'foo', 'baz', [ 'foo', 'bar' ], 250000, 50000 ],\r\n  _statements:\r\n   [ { grouping: 'compiling', type: 'insert', value: [Object] },\r\n     { grouping: 'using', type: 'usingTimestamp', val: 250000 },\r\n     { grouping: 'using', type: 'usingTTL', val: 50000 } ],\r\n  ... }\r\n```\r\n\r\n> While fuller documentation for all methods is in the works, **the [test files](./tests) provide thorough examples as to method usage**.\r\n\r\n#### <a name=\"QueryExecutors\"></a>Query Executors\r\n\r\n> All methods take an optional `options` object as the first argument in the call signature; if provided, the options will be passed through to the corresponding `cassandra-driver` call.\r\n\r\n- exec - *execute a query and return the response via a callback*:\r\n\r\n  ```js\r\n  var item = {\r\n    foo: \"bar\",\r\n    bar: [\"foo\", \"baz\"]\r\n  };\r\n  var qb = cassanKnex(\"cassanKnexy\")\r\n    .insert(item)\r\n    .into(\"columnFamily\")\r\n    .exec(function(err, result) {\r\n      // do something w/ your err/result\r\n    });\r\n\r\n    // w/ options\r\n    qb.exec({ prepare: false }, function(err, result) {\r\n       // do something w/ your err/result\r\n     });\r\n  ```\r\n- eachRow - *execute a query and invoke a callback as each row is received*:\r\n\r\n  ```js\r\n  var rowCallback = function (n, row) {\r\n      // Readable is emitted as soon a row is received and parsed\r\n    }\r\n    , errorCallback = function (err) {\r\n      // Something went wrong: err is a response error from Cassandra\r\n    };\r\n\r\n  var qb = cassanKnex(\"cassanKnexy\")\r\n    .select()\r\n    .from(\"columnFamily\");\r\n\r\n  // Invoke the eachRow method\r\n  qb.eachRow(rowCallback, errorCallback);\r\n  ```\r\n- stream - *execute a query and stream each row as it is received*:\r\n\r\n  ```js\r\n  var onReadable = function () {\r\n      // Readable is emitted as soon a row is received and parsed\r\n      var row;\r\n      while (row = this.read()) {\r\n        // do something w/ your row\r\n      }\r\n    }\r\n    , onEnd = function () {\r\n      // Stream ended, there aren't any more rows\r\n    }\r\n    , onError = function (err) {\r\n      // Something went wrong: err is a response error from Cassandra\r\n    };\r\n\r\n  var qb = cassanKnex(\"cassanKnexy\")\r\n    .select()\r\n    .from(\"columnFamily\");\r\n\r\n  // Invoke the stream method\r\n  qb.stream({\r\n    \"readable\": onReadable,\r\n    \"end\": onEnd,\r\n    \"error\": onError\r\n  });\r\n  ```\r\n\r\n#### <a name=\"QueryCommands\"></a>Query Commands\r\n\r\n##### <a name=\"QueryCommands-Rows\"></a>*For standard (row) queries*:\r\n- insert - *compile an __insert__ query string*\r\n\r\n  ```js\r\n      var qb = cassanKnex(\"cassanKnexy\")\r\n        , values = {\r\n          \"id\": \"foo\"\r\n          , \"bar\": \"baz\"\r\n          , \"baz\": [\"foo\", \"bar\"]\r\n        };\r\n      qb.insert(values)\r\n        .usingTimestamp(250000)\r\n        .usingTTL(50000)\r\n        .into(\"columnFamily\");\r\n\r\n      // => INSERT INTO cassanKnexy.columnFamily (id,bar,baz)\r\n      //      VALUES (?, ?, ?)\r\n      //      USING TIMESTAMP ?\r\n      //      AND USING TTL ?;\r\n  ```\r\n- select - *compile a __select OR select as__ query string*\r\n  - select all columns for a given query:\r\n\r\n    ```js\r\n    var qb = cassanKnex(\"cassanKnexy\");\r\n    qb.select(\"id\", \"foo\", \"bar\", \"baz\")\r\n      .where(\"id\", \"=\", \"1\")\r\n      .orWhere(\"id\", \"in\", [\"2\", \"3\"])\r\n      .orWhere(\"baz\", \"=\", \"bar\")\r\n      .andWhere(\"foo\", \"IN\", [\"baz\", \"bar\"])\r\n      .limit(10)\r\n      .from(\"columnFamily\");\r\n\r\n    // => SELECT id,foo,bar,baz FROM cassanKnexy.columnFamily\r\n    //      WHERE id = ?\r\n    //      OR id in (?, ?)\r\n    //      OR baz = ?\r\n    //      AND foo IN (?, ?)\r\n    //      LIMIT ?;\r\n    ```\r\n  - 'select as' specified columns:\r\n\r\n    ```js\r\n    var qb = cassanKnex(\"cassanKnexy\");\r\n    qb.select({\"id\": \"foo\"})\r\n      .from(\"columnFamily\");\r\n\r\n    // => SELECT id AS foo FROM cassanKnexy.columnFamily;\r\n    ```\r\n- update - *compile an __update__ query string*\r\n  - simple set column values:\r\n\r\n  ```js\r\n    var qb = cassanKnex(\"cassanKnexy\");\r\n    qb.update(\"columnFamily\")\r\n      .set(\"bar\", \"foo\")\r\n      .set(\"foo\", \"bar\")\r\n      .where(\"foo[bar]\", \"=\", \"baz\")\r\n      .where(\"id\", \"in\", [\"1\", \"1\", \"2\", \"3\", \"5\"]);\r\n\r\n    // => UPDATE cassanKnexy.columnFamily\r\n    //      SET bar = ?,foo = ?\r\n    //      WHERE foo[bar] = ?\r\n    //      AND id in (?, ?, ?, ?, ?);\r\n  ```\r\n  - set column values using object parameters:\r\n\r\n  ```js\r\n  var qb = cassanKnex(\"cassanKnexy\");\r\n  qb.update(\"columnFamily\")\r\n    .set({\r\n      \"bar\": \"baz\",\r\n      \"foo\": [\"bar\", \"baz\"]\r\n    })\r\n    .where(\"foo[bar]\", \"=\", \"baz\")\r\n    .where(\"id\", \"in\", [\"1\", \"1\", \"2\", \"3\", \"5\"]);\r\n\r\n  // => UPDATE cassanKnexy.columnFamily\r\n  //      SET bar = ?,foo = ?\r\n  //      WHERE foo[bar] = ?\r\n  //      AND id in (?, ?, ?, ?, ?);\r\n  ```\r\n- delete - *compile a __delete__ query string*\r\n  - delete all columns for a given row:\r\n\r\n    ```js\r\n      var qb = cassanknex(\"cassanKnexy\");\r\n      qb.delete()\r\n        .from(\"columnFamily\")\r\n        .where(\"foo[bar]\", \"=\", \"baz\")\r\n        .where(\"id\", \"in\", [\"1\", \"1\", \"2\", \"3\", \"5\"]);\r\n\r\n      // => DELETE  FROM cassanKnexy.columnFamily\r\n      //      WHERE foo[bar] = ?\r\n      //      AND id in (?, ?, ?, ?, ?);\r\n    ```\r\n  - delete specified columns for a given row:\r\n\r\n    ```js\r\n      var qb = cassanknex(\"cassanKnexy\");\r\n      qb.delete([\"foo\", \"bar\"])\r\n      // OR\r\n      qb.delete(\"foo\", \"bar\")\r\n\r\n        .from(\"columnFamily\")\r\n        .where(\"foo[bar]\", \"=\", \"baz\")\r\n        .where(\"id\", \"in\", [\"1\", \"1\", \"2\", \"3\", \"5\"]);\r\n\r\n      // => DELETE foo,bar FROM cassanKnexy.columnFamily\r\n      //      WHERE foo[bar] = ?\r\n      //      AND id in (?, ?, ?, ?, ?);\r\n    ```\r\n\r\n##### <a name=\"QueryCommands-ColumnFamilies\"></a>*For column family queries*:\r\n- alterColumnFamily\r\n- createColumnFamily\r\n- createColumnFamilyIfNotExists\r\n- dropColumnFamily\r\n- dropColumnFamilyIfExists\r\n- createIndex\r\n\r\n##### <a name=\"QueryCommands-Keyspaces\"></a>*For keyspace queries*:\r\n- alterKeyspace\r\n- createKeyspace\r\n- createKeyspaceIfNotExists\r\n- dropKeyspace\r\n- dropKeyspaceIfExists\r\n\r\n#### <a name=\"QueryModifiers\"></a>Query Modifiers\r\n\r\n##### <a name=\"QueryModifiers-Rows\"></a>*For standard (row) queries*:\r\n- from\r\n- into\r\n- where\r\n- andWhere\r\n- orWhere\r\n- set\r\n- if\r\n- ifExists\r\n- ifNotExists\r\n- usingTTL\r\n- usingTimestamp\r\n- limit\r\n\r\n##### <a name=\"QueryModifiers-ColumnFamilies\"></a>*For column family queries*:\r\n- alter\r\n- drop\r\n- rename\r\n- primary\r\n- list\r\n- set\r\n- decimal\r\n- boolean\r\n- blob\r\n- timestamp\r\n- inet\r\n- bigint\r\n- counter\r\n- double\r\n- int\r\n- float\r\n- map\r\n- ascii\r\n- text\r\n- timeuuid\r\n- uuid\r\n- varchar\r\n- withCaching\r\n- withCompression\r\n- withCompaction\r\n- withClusteringOrderBy\r\n\r\n##### <a name=\"QueryModifiers-Keyspaces\"></a>*For keyspace queries*:\r\n- withNetworkTopologyStrategy\r\n- withSimpleStrategy\r\n- withDurableWrites\r\n\r\n#### <a name=\"ChangeLog\"></a>ChangeLog\r\n\r\n- 1.6.0\r\n  - Add `options` support for `eachRow` per issue #8.\r\n- 1.5.1, 1.5.2\r\n  - OMG DOCS!\r\n- 1.5.0\r\n  - Add QueryCommand `delete`.\r\n- 1.4.0\r\n  - Add support for object style `set` calls; e.g. `.set(<Object := {<String>: <Mixed>, ...}>)`.\r\n- 1.3.0\r\n  - Add support for the DataStax driver `eachRow` method.\r\n- 1.2.0\r\n  - Add support for the DataStax driver `stream` method.\r\n- 1.1.0\r\n  - Add QueryCommand `createIndex`.\r\n  - Add QueryModifier `allowFiltering`.\r\n\r\n[npm-image]: https://img.shields.io/npm/v/cassanknex.svg?style=flat\r\n[npm-url]: https://npmjs.org/package/cassanknex\r\n[inch-image]: http://inch-ci.org/github/azuqua/cassanknex.svg?branch=master&style=shields\r\n[inch-url]: http://inch-ci.org/github/azuqua/cassanknex\r\n[travis-image]: https://travis-ci.org/azuqua/cassanknex.svg?branch=master&style=flat\r\n[travis-url]: https://travis-ci.org/azuqua/cassanknex\r\n\r\n[cassandra-cql-3_1-ref-url]: http://docs.datastax.com/en/cql/3.1/cql/cql_reference/cqlReferenceTOC.html\r\n[cassandra-driver-url]: https://github.com/datastax/nodejs-driver\r\n[cassandra-driver-docs-url]: http://docs.datastax.com/en/drivers/nodejs/2.1/Client.html\r\n[knexjs-url]: http://knexjs.org/\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}